<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[行走的力量]]></title>
  <subtitle><![CDATA[一直走，路总会笑]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2014-11-08T05:47:50.772Z</updated>
  <id>/</id>
  
  <author>
    <name><![CDATA[Weber Wang]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Objective-C Runtime]]></title>
    <link href="/2014/11/08/OBJC-Runtime/"/>
    <id>/2014/11/08/OBJC-Runtime/</id>
    <published>2014-11-08T05:11:22.000Z</published>
    <updated>2014-11-08T05:42:39.000Z</updated>
    <content type="html"><![CDATA[<p><strong>本文来源<a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">玉令天下的blog</a></strong></p>
<p><img src="http://cn.cocos2d-x.org/uploads/20141107/1415327393565282.jpeg" alt="图片"><br>本文详细整理了 Cocoa 的 Runtime 系统的知识，它使得 Objective-C 如虎添翼，具备了灵活的动态特性，使这门古老的语言焕发生机。主要内容如下：<br>引言</p>
<p>简介</p>
<p>与Runtime交互</p>
<p>Runtime术语</p>
<p>消息</p>
<p>动态方法解析</p>
<p>消息转发</p>
<p>健壮的实例变量(Non Fragile ivars)</p>
<p>Objective-C Associated Objects</p>
<p>总结</p>
<h2 id="引言">引言</h2>
<p>曾经觉得Objc特别方便上手，面对着 Cocoa 中大量 API，只知道简单的查文档和调用。还记得初学 Objective-C 时把[receiver message]当成简单的方法调用，而无视了“发送消息”这句话的深刻含义。于是[receiver message]会被编译器转化为：</p>
<blockquote>
<ol>
<li>objc_msgSend(receiver, selector)</li>
</ol>
</blockquote>
<p>如果消息含有参数，则为:</p>
<blockquote>
<ol>
<li>objc_msgSend(receiver, selector, arg1, arg2, …)</li>
</ol>
</blockquote>
<p>如果消息的接收者能够找到对应的selector，那么就相当于直接执行了接收者这个对象的特定方法；否则，消息要么被转发，或是临时向接收者动态添加这个selector对应的实现内容，要么就干脆玩完崩溃掉。</p>
<p>现在可以看出[receiver message]真的不是一个简简单单的方法调用。因为这只是在编译阶段确定了要向接收者发送message这条消息，而receive将要如何响应这条消息，那就要看运行时发生的情况来决定了。</p>
<p>Objective-C 的 Runtime 铸就了它动态语言的特性，这些深层次的知识虽然平时写代码用的少一些，但是却是每个 Objc 程序员需要了解的。</p>
<h2 id="简介">简介</h2>
<p>因为Objc是一门动态语言，所以它总是想办法把一些决定工作从编译连接推迟到运行时。也就是说只有编译器是不够的，还需要一个运行时系统 (runtime system) 来执行编译后的代码。这就是 Objective-C Runtime 系统存在的意义，它是整个Objc运行框架的一块基石。</p>
<p>Runtime其实有两个版本:“modern”和 “legacy”。我们现在用的 Objective-C 2.0 采用的是现行(Modern)版的Runtime系统，只能运行在 iOS 和 OS X 10.5 之后的64位程序中。而OS X较老的32位程序仍采用 Objective-C 1中的（早期）Legacy 版本的 Runtime 系统。这两个版本最大的区别在于当你更改一个类的实例变量的布局时，在早期版本中你需要重新编译它的子类，而现行版就不需要。</p>
<p>Runtime基本是用C和汇编写的，可见苹果为了动态系统的高效而作出的努力。你可以在这里下到苹果维护的开源代码。苹果和GNU各自维护一个开源的runtime版本，这两个版本之间都在努力的保持一致。</p>
<h2 id="与Runtime交互">与Runtime交互</h2>
<p>Objc 从三种不同的层级上与 Runtime 系统进行交互，分别是通过 Objective-C 源代码，通过 Foundation 框架的NSObject类定义的方法，通过对 runtime 函数的直接调用。</p>
<h3 id="Objective-C源代码">Objective-C源代码</h3>
<p>大部分情况下你就只管写你的Objc代码就行，runtime 系统自动在幕后辛勤劳作着。</p>
<p>还记得引言中举的例子吧，消息的执行会使用到一些编译器为实现动态语言特性而创建的数据结构和函数，Objc中的类、方法和协议等在 runtime 中都由一些数据结构来定义，这些内容在后面会讲到。（比如objc_msgSend函数及其参数列表中的id和SEL都是啥）</p>
<h3 id="NSObject的方法">NSObject的方法</h3>
<p>Cocoa 中大多数类都继承于NSObject类，也就自然继承了它的方法。最特殊的例外是NSProxy，它十个抽象超类，它实现了一些消息转发有关的方法，可以通过继承它来实现一个其他类的替身类或是虚拟出一个不存在的类，说白了就是领导把自己展现给大家风光无限，但是把活儿都交给幕后小弟去干。</p>
<p>有的NSObject中的方法起到了抽象接口的作用，比如description方法需要你重载它并为你定义的类提供描述内容。NSObject还有些方法能在运行时获得类的信息，并检查一些特性，比如class返回对象的类；isKindOfClass:和isMemberOfClass:则检查对象是否在指定的类继承体系中；respondsToSelector:检查对象能否响应指定的消息；conformsToProtocol:检查对象是否实现了指定协议类的方法；methodForSelector:则返回指定方法实现的地址。</p>
<h3 id="Runtime的函数">Runtime的函数</h3>
<p>Runtime 系统是一个由一系列函数和数据结构组成，具有公共接口的动态共享库。头文件存放于/usr/include/objc目录下。许多函数允许你用纯C代码来重复实现 Objc 中同样的功能。虽然有一些方法构成了NSObject类的基础，但是你在写 Objc 代码时一般不会直接用到这些函数的，除非是写一些 Objc 与其他语言的桥接或是底层的debug工作。在Objective-C Runtime Reference中有对 Runtime 函数的详细文档。</p>
<h2 id="Runtime术语">Runtime术语</h2>
<p>还记得引言中的objc_msgSend:方法吧，它的真身是这样的：</p>
<blockquote>
<p>id objc_msgSend ( id self, SEL op, … );</p>
</blockquote>
<p>下面将会逐渐展开介绍一些术语，其实它们都对应着数据结构。</p>
<h3 id="SEL">SEL</h3>
<p>objc_msgSend函数第二个参数类型为SEL，它是selector在Objc中的表示类型（Swift中是Selector类）。selector是方法选择器，可以理解为区分方法的 ID，而这个 ID 的数据结构是SEL:</p>
<blockquote>
<p>typedef struct objc_selector *SEL;</p>
</blockquote>
<p>其实它就是个映射到方法的C字符串，你可以用 Objc 编译器命令@selector()或者 Runtime 系统的 sel_registerName函数来获得一个SEL类型的方法选择器。</p>
<p>不同类中相同名字的方法所对应的方法选择器是相同的，即使方法名字相同而变量类型不同也会导致它们具有相同的方法选择器，于是 Objc 中方法命名有时会带上参数类型(NSNumber一堆抽象工厂方法拿走不谢)，Cocoa 中有好多长长的方法哦。</p>
<h3 id="id">id</h3>
<p>objc_msgSend第一个参数类型为id，大家对它都不陌生，它是一个指向类实例的指针：</p>
<blockquote>
<p>typedef struct objc_object *id;</p>
</blockquote>
<p>那objc_object又是啥呢：</p>
<blockquote>
<p>struct objc_object { Class isa; };</p>
</blockquote>
<p>objc_object结构体包含一个isa指针，根据isa指针就可以顺藤摸瓜找到对象所属的类。</p>
<h3 id="Class">Class</h3>
<p>之所以说isa是指针是因为Class其实是一个指向objc_class结构体的指针：</p>
<blockquote>
<p>typedef struct objc_class *Class;</p>
</blockquote>
<p>而objc_class就是我们摸到的那个瓜，里面的东西多着呢：</p>
<figure class="highlight Objective-C"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_class {</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line"><span class="preprocessor">#<span class="keyword">if</span> !__OBJC2__</span></div><div class="line">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">} OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>

<p>可以看到运行时一个类还关联了它的超类指针，类名，成员变量，方法，缓存，还有附属的协议。<br>其中objc_ivar_list和objc_method_list分别是成员变量列表和方法列表：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_ivar_list {</div><div class="line">    <span class="keyword">int</span> ivar_count                                           OBJC2_UNAVAILABLE;</div><div class="line"><span class="preprocessor">#ifdef __LP64__</span></div><div class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">    <span class="comment">/* variable length structure */</span></div><div class="line">    <span class="keyword">struct</span> objc_ivar ivar_list[<span class="number">1</span>]                            OBJC2_UNAVAILABLE;</div><div class="line">}                                                            OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_method_list {</div><div class="line">    <span class="keyword">struct</span> objc_method_list *obsolete                        OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">int</span> method_count                                         OBJC2_UNAVAILABLE;</div><div class="line"><span class="preprocessor">#ifdef __LP64__</span></div><div class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">    <span class="comment">/* variable length structure */</span></div><div class="line">    <span class="keyword">struct</span> objc_method method_list[<span class="number">1</span>]                        OBJC2_UNAVAILABLE;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你C语言不是特别好，可以直接理解为objc_ivar_list结构体存储着objc_ivar数组列表，而objc_ivar结构体存储了类的单个成员变量的信息；同理objc_method_list结构体存储着objc_method数组列表，而objc_method结构体存储了类的某个方法的信息。</p>
<p>最后要提到的还有一个objc_cache，顾名思义它是缓存，它在objc_class的作用很重要，在后面会讲到。</p>
<p>一个 ObjC 类同时也是一个对象，为了处理类和对象的关系，runtime 库创建了一种叫做元类 (Meta Class) 的东西。当你发出一个类似[NSObject alloc]的消息时，你事实上是把这个消息发给了一个类对象 (Class Object) ，这个类对象必须是一个元类的实例，而这个元类同时也是一个根元类 (root meta class) 的实例。你会说 NSObject 的子类时，你的类就会指向 NSObject 做为其超类。但是所有的元类都指向根元类为其超类。所有的元类的方法列表都有能够响应消息的类方法。所以当 [NSObject alloc] 这条消息发给类对象的时候，objc_msgSend()会去它的元类里面去查找能够响应消息的方法，如果找到了，然后对这个类对象执行方法调用。</p>
<h3 id="Method">Method</h3>
<p>Method是一种代表类中的某个方法的类型。</p>
<blockquote>
<p>typedef struct objc_method *Method;</p>
</blockquote>
<p>而objc_method在上面的方法列表中提到过，它存储了方法名，方法类型和方法实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">struct</span> objc_method {</div><div class="line">    <span class="title">SEL</span> method_name                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="title">char</span> *method_types                                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="title">IMP</span> method_imp                                           OBJC2_UNAVAILABLE;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>方法名类型为SEL，前面提到过相同名字的方法即使在不同类中定义，它们的方法选择器也相同。</p>
<p>方法类型method_types是个char指针，其实存储着方法的参数类型和返回值类型。</p>
<p>method_imp指向了方法的实现，本质上是一个函数指针，后面会详细讲到。</p>
<h3 id="Ivar">Ivar</h3>
<p>Ivar是一种代表类中实例变量的类型。</p>
<blockquote>
<p>typedef struct objc_ivar *Ivar;</p>
</blockquote>
<p>而objc_ivar在上面的成员变量列表中也提到过：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">truct objc_ivar {</div><div class="line">    <span class="keyword">char</span> *ivar_name                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *ivar_type                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">int</span> ivar_offset                                          OBJC2_UNAVAILABLE;</div><div class="line"><span class="preprocessor">#ifdef __LP64__</span></div><div class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">}                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>

<p><strong>PS</strong>:OBJC2_UNAVAILABLE之类的宏定义是苹果在 Objc 中对系统运行版本进行约束的黑魔法，有兴趣的可以查看源代码。</p>
<h3 id="IMP">IMP</h3>
<p>IMP在objc.h中的定义是：</p>
<blockquote>
<p>typedef id (*IMP)(id, SEL, …);</p>
</blockquote>
<p>它就是一个函数指针，这是由编译器生成的。当你发起一个 ObjC 消息之后，最终它会执行的那段代码，就是由这个函数指针指定的。而IMP这个函数指针就指向了这个方法的实现。既然得到了执行某个实例某个方法的入口，我们就可以绕开消息传递阶段，直接执行方法，这在后面会提到。</p>
<p>你会发现IMP指向的方法与objc_msgSend函数类型相同，参数都包含id和SEL类型。每个方法名都对应一个SEL类型的方法选择器，而每个实例对象中的SEL对应的方法实现肯定是唯一的，通过一组id和SEL参数就能确定唯一的方法实现地址；反之亦然。</p>
<h3 id="Cache">Cache</h3>
<p>在runtime.h中Cache的定义如下：</p>
<blockquote>
<p>typedef struct objc_cache *Cache</p>
</blockquote>
<p>还记得之前objc_class结构体中有一个struct objc_cache *cache吧，它到底是缓存啥的呢，先看看objc_cache的实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_cache {</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask <span class="comment">/* total = mask + 1 */</span>                 OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> occupied                                    OBJC2_UNAVAILABLE;</div><div class="line">    Method buckets[<span class="number">1</span>]                                        OBJC2_UNAVAILABLE;</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Cache为方法调用的性能进行优化，通俗地讲，每当实例对象接收到一个消息时，它不会直接在isa指向的类的方法列表中遍历查找能够响应消息的方法，因为这样效率太低了，而是优先在Cache中查找。Runtime 系统会把被调用的方法存到Cache中（理论上讲一个方法如果被调用，那么它有可能今后还会被调用），下次查找的时候效率更高。这根计算机组成原理中学过的 CPU 绕过主存先访问Cache的道理挺像，而我猜苹果为提高Cache命中率应该也做了努力吧。</p>
<h2 id="消息">消息</h2>
<p>前面做了这么多铺垫，现在终于说到了消息了。Objc 中发送消息是用中括号（[]）把接收者和消息括起来，而直到运行时才会把消息与方法实现绑定。</p>
<h3 id="objc_msgSend函数">objc_msgSend函数</h3>
<p>在引言中已经对objc_msgSend进行了一点介绍，看起来像是objc_msgSend返回了数据，其实objc_msgSend从不返回数据而是你的方法被调用后返回了数据。下面详细叙述下消息发送步骤：</p>
<p>1.检测这个 selector 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会 retain, release 这些函数了。</p>
<p>2.检测这个 target 是不是 nil 对象。ObjC 的特性是允许对一个 nil 对象执行任何一个方法不会 Crash，因为会被忽略掉。</p>
<p>3.如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，完了找得到就跳到对应的函数去执行。</p>
<p>4.如果 cache 找不到就找一下方法分发表。</p>
<p>5.如果分发表找不到就到超类的分发表去找，一直找，直到找到NSObject类为止。</p>
<p>6.如果还找不到就要开始进入动态方法解析了，后面会提到。</p>
<p>PS:这里说的分发表其实就是Class中的方法列表，它将方法选择器和方法实现地质联系起来。<br><img src="http://cn.cocos2d-x.org/uploads/20141107/1415328329542000.gif" alt="image"><br>其实编译器会根据情况在objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, 或 objc_msgSendSuper_stret四个方法中选择一个来调用。如果消息是传递给超类，那么会调用名字带有”Super”的函数；如果消息返回值是数据结构而不是简单值时，那么会调用名字带有”stret”的函数。排列组合正好四个方法。</p>
<h3 id="方法中的隐藏参数">方法中的隐藏参数</h3>
<p>我们经常在方法中使用self关键字来引用实例本身，但从没有想过为什么self就能取到调用当前方法的对象吧。其实self的内容是在方法运行时被偷偷的动态传入的。</p>
<p>当objc_msgSend找到方法对应的实现时，它将直接调用该方法实现，并将消息中所有的参数都传递给方法实现,同时,它还将传递两个隐藏的参数:</p>
<p>– 接收消息的对象（也就是self指向的内容） – 方法选择器（_cmd指向的内容） 之所以说它们是隐藏的是因为在源代码方法的定义中并没有声明这两个参数。它们是在代码被编译时被插入实现中的。尽管这些参数没有被明确声明，在源代码中我们仍然可以引用它们。在下面的例子中，self引用了接收者对象，而_cmd引用了方法本身的选择器：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- strange</div><div class="line">{</div><div class="line">    id  target = getTheReceiver();</div><div class="line">    <span class="type">SEL</span> <span class="keyword">method</span> = getTheMethod();</div><div class="line">    <span class="keyword">if</span> ( target == self || <span class="keyword">method</span> == _cmd )</div><div class="line">        <span class="keyword">return</span> <span class="keyword">nil</span>;</div><div class="line">    <span class="keyword">return</span> [target performSelector:<span class="keyword">method</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在这两个参数中，self 更有用。实际上,它是在方法实现中访问消息接收者对象的实例变量的途径。</p>
<p>而当方法中的super关键字接收到消息时，编译器会创建一个objc_super结构体：</p>
<blockquote>
<p>struct objc_super { id receiver; Class class; };</p>
</blockquote>
<p>这个结构体指明了消息应该被传递给特定超类的定义。但receiver仍然是self本身，这点需要注意，因为当我们想通过[super class]获取超类时，编译器只是将指向self的id指针和class的SEL传递给了objc_msgSendSuper函数，因为只有在NSObject类找到class方法，然后class方法调用object_getClass()，传入参数是指向self的id指针，所以我们得到的永远都是self的类型。</p>
<h3 id="获取方法地址">获取方法地址</h3>
<p>在IMP那节提到过可以避开消息绑定而直接获取方法的地址并调用方法。这种做法很少用，除非是需要持续大量重复调用某方法的极端情况，避开消息发送泛滥而直接调用该方法会更高效。</p>
<p>NSObject类中有个methodForSelector:实例方法，你可以用它来获取某个方法选择器对应的IMP，举个栗子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void <span class="comment">(*setter)(id, SEL, BOOL);</span></div><div class="line">int i;</div><div class="line">setter = (void (*)(id, SEL, BOOL))[target</div><div class="line">    methodForSelector:@<span class="keyword">selector</span>(setFilled:)];</div><div class="line"><span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; <span class="number">1000</span> ; i++ )</div><div class="line">    setter(targetList[i], @<span class="keyword">selector</span>(setFilled:), YES);</div></pre></td></tr></table></figure>

<p>当方法被当做函数调用时，上节提到的两个隐藏参数就需要我们明确给出了。上面的例子调用了1000次函数，你可以试试直接给target发送1000次setFilled:消息会花多久。</p>
<p>PS：methodForSelector:方法是由 Cocoa 的 Runtime 系统提供的，而不是 Objc 自身的特性。</p>
<h2 id="动态方法解析">动态方法解析</h2>
<p>你可以动态地提供一个方法的实现。例如我们可以用@dynamic关键字在类的实现文件中修饰一个属性：</p>
<blockquote>
<p>@dynamic propertyName;</p>
</blockquote>
<p>这表明我们会为这个属性动态提供存取方法，也就是说编译器不会再默认为我们生成setPropertyName:和propertyName方法，而需要我们动态提供。我们可以通过分别重载resolveInstanceMethod:和resolveClassMethod:方法分别添加实例方法实现和类方法实现。因为当 Runtime 系统在Cache和方法分发表中（包括超类）找不到要执行的方法时，Runtime会调用resolveInstanceMethod:或resolveClassMethod:来给程序员一次动态添加方法实现的机会。我们需要用class_addMethod函数完成向特定类添加特定方法实现的操作：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> dynamicMethodIMP(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd) {</div><div class="line">    <span class="comment">// implementation ....</span></div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)aSEL</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (aSEL == <span class="keyword">@selector</span>(resolveThisMethodDynamically)) {</div><div class="line">          class_addMethod([<span class="keyword">self</span> class], aSEL, (IMP) dynamicMethodIMP, <span class="string">"v@:"</span>);</div><div class="line">          <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:aSEL];</div><div class="line">}</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<p>上面的例子为resolveThisMethodDynamically方法添加了实现内容，也就是dynamicMethodIMP方法中的代码。其中 “v@:” 表示返回值和参数，这个符号涉及 Type Encoding</p>
<p>PS：动态方法解析会在消息转发机制浸入前执行。如果 respondsToSelector: 或 instancesRespondToSelector:方法被执行，动态方法解析器将会被首先给予一个提供该方法选择器对应的IMP的机会。如果你想让该方法选择器被传送到转发机制，那么就让resolveInstanceMethod:返回NO。</p>
<h2 id="消息转发">消息转发</h2>
<h3 id="重定向">重定向</h3>
<p>在消息转发机制执行前，Runtime 系统会再给我们一次偷梁换柱的机会，即通过重载- (id)forwardingTargetForSelector:(SEL)aSelector方法替换消息的接受者为其他对象：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class="line">{</div><div class="line">    <span class="keyword">if</span>(aSelector == <span class="keyword">@selector</span>(mysteriousMethod:)){</div><div class="line">        <span class="keyword">return</span> alternateObject;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">}</div></pre></td></tr></table></figure>

<p>毕竟消息转发要耗费更多时间，抓住这次机会将消息重定向给别人是个不错的选择，不过千万别返回self，因为那样会死循环。</p>
<h3 id="转发">转发</h3>
<p>当动态方法解析不作处理返回NO时，消息转发机制会被触发。在这时forwardInvocation:方法会被执行，我们可以重写这个方法来定义我们的转发逻辑：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(NSInvocation *)anInvocation</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> ([someOtherObject respondsToSelector:</div><div class="line">            [anInvocation selector]])</div><div class="line">        [anInvocation invokeWithTarget:someOtherObject];</div><div class="line">    <span class="keyword">else</span></div><div class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</div><div class="line">}</div></pre></td></tr></table></figure>

<p>该消息的唯一参数是个NSInvocation类型的对象——该对象封装了原始的消息和消息的参数。我们可以实现forwardInvocation:方法来对不能处理的消息做一些默认的处理，也可以将消息转发给其他对象来处理，而不抛出错误。</p>
<p>这里需要注意的是参数anInvocation是从哪的来的呢？其实在forwardInvocation:消息发送前，Runtime系统会向对象发送methodSignatureForSelector:消息，并取到返回的方法签名用于生成NSInvocation对象。所以我们在重写forwardInvocation:的同时也要重写methodSignatureForSelector:方法，否则会抛异常。</p>
<p>当一个对象由于没有相应的方法实现而无法响应某消息时，运行时系统将通过forwardInvocation:消息通知该对象。每个对象都从NSObject类中继承了forwardInvocation:方法。然而，NSObject中的方法实现只是简单地调用了doesNotRecognizeSelector:。通过实现我们自己的forwardInvocation:方法，我们可以在该方法实现中将消息转发给其它对象。</p>
<p>forwardInvocation:方法就像一个不能识别的消息的分发中心，将这些消息转发给不同接收对象。或者它也可以象一个运输站将所有的消息都发送给同一个接收对象。它可以将一个消息翻译成另外一个消息，或者简单的”吃掉“某些消息，因此没有响应也没有错误。forwardInvocation:方法也可以对不同的消息提供同样的响应，这一切都取决于方法的具体实现。该方法所提供是将不同的对象链接到消息链的能力。</p>
<p>注意：forwardInvocation:方法只有在消息接收对象中无法正常响应消息时才会被调用。 所以，如果我们希望一个对象将negotiate消息转发给其它对象，则这个对象不能有negotiate方法。否则，forwardInvocation:将不可能会被调用。</p>
<h3 id="转发和多继承">转发和多继承</h3>
<p>转发和继承相似，可以用于为Objc编程添加一些多继承的效果。就像下图那样，一个对象把消息转发出去，就好似它把另一个对象中的方法借过来或是“继承”过来一样。<br><img src="http://cn.cocos2d-x.org/uploads/20141107/1415328602124809.gif" alt="image"><br>这使得不同继承体系分支下的两个类可以“继承”对方的方法，在上图中Warrior和Diplomat没有继承关系，但是Warrior将negotiate消息转发给了Diplomat后，就好似Diplomat是Warrior的超类一样。</p>
<p>消息转发弥补了 Objc 不支持多继承的性质，也避免了因为多继承导致单个类变得臃肿复杂。它将问题分解得很细，只针对想要借鉴的方法才转发，而且转发机制是透明的。</p>
<h3 id="替代者对象(Surrogate_Objects)">替代者对象(Surrogate Objects)</h3>
<p>转发不仅能模拟多继承，也能使轻量级对象代表重量级对象。弱小的女人背后是强大的男人，毕竟女人遇到难题都把它们转发给男人来做了。这里有一些适用案例，可以参看官方文档。</p>
<h3 id="转发与继承">转发与继承</h3>
<p>尽管转发很像继承，但是NSObject类不会将两者混淆。像respondsToSelector: 和 isKindOfClass:这类方法只会考虑继承体系，不会考虑转发链。比如上图中一个Warrior对象如果被问到是否能响应negotiate消息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( [aWarrior respondsToSelector:@selector(negotiate)] )</div><div class="line">    <span class="keyword">...</span></div></pre></td></tr></table></figure>

<p>结果是NO，尽管它能够接受negotiate消息而不报错，因为它靠转发消息给Diplomat类来响应消息。</p>
<p>如果你为了某些意图偏要“弄虚作假”让别人以为Warrior继承到了Diplomat的negotiate方法，你得重新实现 respondsToSelector: 和 isKindOfClass:来加入你的转发算法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (BOOL)respondsToSelector:(SEL)aSelector</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> ( [super respondsToSelector:aSelector] )</div><div class="line"><span class="command">        return</span> YES;</div><div class="line">    <span class="keyword">else</span> {</div><div class="line">        /* Here, test whether <span class="keyword">the</span> aSelector message can     *</div><div class="line">         * be forwarded <span class="keyword">to</span> another object <span class="keyword">and</span> whether <span class="keyword">that</span>  *</div><div class="line">         * object can respond <span class="keyword">to</span> <span class="keyword">it</span>. Return YES <span class="keyword">if</span> <span class="keyword">it</span> can.  */</div><div class="line">    }</div><div class="line"><span class="command">    return</span> NO;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>除了respondsToSelector: 和 isKindOfClass:之外，instancesRespondToSelector:中也应该写一份转发算法。如果使用了协议，conformsToProtocol:同样也要加入到这一行列中。类似地，如果一个对象转发它接受的任何远程消息，它得给出一个methodSignatureForSelector:来返回准确的方法描述，这个方法会最终响应被转发的消息。比如一个对象能给它的替代者对象转发消息，它需要像下面这样实现methodSignatureForSelector:：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (NSMethodSignature*)methodSignatureForSelector:(SEL)selector</div><div class="line">{</div><div class="line">    NSMethodSignature* signature = [<span class="keyword">super</span> methodSignatureForSelector:selector];</div><div class="line">    <span class="keyword">if</span> (!signature) {</div><div class="line">       signature = [surrogate methodSignatureForSelector:selector];</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> signature;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="健壮的实例变量(Non_Fragile_ivars)">健壮的实例变量(Non Fragile ivars)</h2>
<p>在 Runtime 的现行版本中，最大的特点就是健壮的实例变量。当一个类被编译时，实例变量的布局也就形成了，它表明访问类的实例变量的位置。从对象头部开始，实例变量依次根据自己所占空间而产生位移：</p>
<p><img src="http://cn.cocos2d-x.org/uploads/20141107/1415328683714351.png" alt="image"><br>上图左边是NSObject类的实例变量布局，右边是我们写的类的布局，也就是在超类后面加上我们自己类的实例变量，看起来不错。但试想如果那天苹果更新了NSObject类，发布新版本的系统的话，那就悲剧了：</p>
<p><img src="http://cn.cocos2d-x.org/uploads/20141107/1415328696686150.png" alt="image"></p>
<p>在健壮的实例变量下编译器生成的实例变量布局跟以前一样，但是当 runtime 系统检测到与超类有部分重叠时它会调整你新添加的实例变量的位移，那样你在子类中新添加的成员就被保护起来了。</p>
<p>需要注意的是在健壮的实例变量下，不要使用sizeof(SomeClass)，而是用class_getInstanceSize([SomeClass class])代替；也不要使用offsetof(SomeClass, SomeIvar)，而要用ivar_getOffset(class_getInstanceVariable([SomeClass class], “SomeIvar”))来代替。</p>
<h2 id="Objective-C_Associated_Objects">Objective-C Associated Objects</h2>
<p>在 OS X 10.6 之后，Runtime系统让Objc支持向对象动态添加变量。涉及到的函数有以下三个：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> objc_setAssociatedObject ( <span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key, <span class="keyword">id</span> value, objc_AssociationPolicy policy );</div><div class="line"><span class="keyword">id</span> objc_getAssociatedObject ( <span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key );</div><div class="line"><span class="keyword">void</span> objc_removeAssociatedObjects ( <span class="keyword">id</span> object );</div></pre></td></tr></table></figure>

<p>这些方法以键值对的形式动态地向对象添加、获取或删除关联值。其中关联政策是一组枚举常量：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> {</span></div><div class="line"><span class="constant">   OBJC_ASSOCIATION_ASSIGN</span>  = <span class="number">0</span>,</div><div class="line"><span class="constant">   OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>  = <span class="number">1</span>,</div><div class="line"><span class="constant">   OBJC_ASSOCIATION_COPY_NONATOMIC</span>  = <span class="number">3</span>,</div><div class="line"><span class="constant">   OBJC_ASSOCIATION_RETAIN</span>  = <span class="number">01401</span>,</div><div class="line"><span class="constant">   OBJC_ASSOCIATION_COPY</span>  = <span class="number">01403</span></div><div class="line">};</div></pre></td></tr></table></figure>

<p>这些常量对应着引用关联值的政策，也就是 Objc 内存管理的引用计数机制。</p>
<h2 id="总结">总结</h2>
<p>我们之所以让自己的类继承NSObject不仅仅因为苹果帮我们完成了复杂的内存分配问题，更是因为这使得我们能够用上 Runtime 系统带来的便利。可能我们平时写代码时可能很少会考虑一句简单的[receiver message]背后发生了什么，而只是当做方法或函数调用。深入理解 Runtime 系统的细节更有利于我们利用消息机制写出功能更强大的代码，比如 Method Swizzling 等。</p>
<p>参考链接：</p>
<p>– <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048" target="_blank" rel="external">Objective-C Runtime Programming Guide</a></p>
<p>– <a href="http://blog.csdn.net/wzzvictory/article/details/8615569" target="_blank" rel="external">Objective-C runtime之运行时的基本特点</a></p>
<p>– <a href="http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html" target="_blank" rel="external">Understanding the Objective-C Runtime</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>本文来源<a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">玉令天下的blog</a></strong>]]>
    </summary>
    
      <category term="Objective-C" scheme="/categories/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[flash组件--List/Grid（1）]]></title>
    <link href="/2014/10/27/flashui-list-grid/"/>
    <id>/2014/10/27/flashui-list-grid/</id>
    <published>2014-10-27T11:44:14.000Z</published>
    <updated>2014-10-29T14:03:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="组件思考">组件思考</h2>
<p><code>List</code> <code>DataGrid</code>这两个组件在Flex中是相当重量级的组件，写得非常好，但是过于庞大。我们的游戏也由用到类似功能的组件—由数据驱动的组件。有时候数据量可能会比较大，组件的效率成了首要考虑的因素。</p>
<h3 id="抽象">抽象</h3>
<p>首先是数据源的问题，因为数据源的修改会直接影响到组件的现实问题，所以对于数据源的修改更新需要被组件所知道，但是AS提供的几个关系数据源的类都没有派发事件的能力，所以需要自己拓展一个数据源类来使用。</p>
<p>其次是显示子对象的处理，和Flex一样也抽象一个<code>RenderItem</code>基类用作项呈示器，每一项数据都对应创建一个项呈示器的实例，内部负责创建和销毁。</p>
<p>最后在视图滚动的时候数据源该如果创建子对象也是需要解决的.在视图滚动的时候如果更新显示对象以及滚动范围。</p>
<h3 id="实现">实现</h3>
<p><strong>数据源</strong>在被修改的时候需要通知组件做相对应的改变，新建一个类可以在数据源改变的时候派发事件。用一个<code>EventDispatch</code>封装一个<code>Array</code>的操作，内部重新实现<code>Array</code>的几个可以改变数据源的函数，比如<code>push</code>, <code>pop</code>等等，在改变数据源的时候派发事件即可在组件监听到并做出相对应的逻辑处理。</p>
<p><strong>项呈示器</strong>每一个实例有包含一个数据源的子项数据，具有以下属性</p>
<ul>
<li><code>index</code>当前的索引</li>
<li><code>data</code>数据项<br>并且实现一个接口，该接口有一个函数签名:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(index:int, data:Object)</span><span class="type">:void</span></span>;</div></pre></td></tr></table></figure>

<p>在组件的数据源需要重新复制到项呈示器的时候调用这个函数更新即可，每个项呈示器都需要在<code>update</code>函数中处理和数据有关的逻辑。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="组件思考">组件思考</h2>
<p><code>List</code> <code>DataGrid</code>这两个组件在Flex中是相当重量级的组件，写得非常好，但是过于庞大。我们的游戏也由用到类似功能的组件—由数据驱动的组件。有时候数据量可能会比较大，组]]>
    </summary>
    
      <category term="ActionScript3.0" scheme="/categories/ActionScript3-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[flash组件--按钮组]]></title>
    <link href="/2014/10/27/flashui-bar/"/>
    <id>/2014/10/27/flashui-bar/</id>
    <published>2014-10-27T11:19:04.000Z</published>
    <updated>2014-10-27T11:43:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="组件思考">组件思考</h2>
<p>有一些组件并不是独立的，它的改变需要去影响其他组件的显示或者内部的逻辑处理，比如Flex框架中的<code>RadioButtonGroup</code>,<code>ButtonBar</code>, <code>ToggleButtonBar</code>等等，内部视图都是互有联系的，游戏中也会用到类似的功能。用AS3代码写几个用到的。</p>
<h3 id="抽象">抽象</h3>
<p>组件内部的子视图之前的相互关系对使用者是透明的，需要什么样的功能内部管理就好，内部监听没一个显示对象的事件，显示对象通过<code>addItem</code>函数添加进去并且监听鼠标事件，可以有一个默认选中项的设定，这取决于开发者。选中项的改变也需要派发相对应的事件。</p>
<h3 id="实现">实现</h3>
<h4 id="RadioButtonGroup">RadioButtonGroup</h4>
<p>这些按钮在选中逻辑上是互斥，所以只是逻辑上处理就可以了，集成<code>EventDispatch</code>基类是最轻便的，在有一个<code>radioButton</code>被选中的时候将上次被选中的按钮设置为未选中状态，同时记录选中的按钮。</p>
<h4 id="ToggleButtonBar">ToggleButtonBar</h4>
<p>某些按钮除了在选中状态上是互斥的以外，在显示上也会有相关，比如选中的按钮会在其他未选中按钮的上面，即<code>index</code>比其他的要高，所以他们应该同属一个父类，所以这个组件就继承ui组件的基类了，其他的逻辑和<code>RadioButtonGroup</code>保持一致即可。</p>
<h2 id="常用属性">常用属性</h2>
<ul>
<li><code>selectIndex</code>:可读写，设置选中的索引，可添加进去的顺序有关.</li>
<li><code>selectItem</code>:可读写，设置选中的按钮项，建议使用<code>selectIndex</code>属性。</li>
</ul>
<h2 id="事件">事件</h2>
<p>在选中项发生改变的时候应该派发<code>selcetChange</code>事件，通知外部。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="组件思考">组件思考</h2>
<p>有一些组件并不是独立的，它的改变需要去影响其他组件的显示或者内部的逻辑处理，比如Flex框架中的<code>RadioButtonGroup</code>,<code>ButtonBar</code>, <code>Toggl]]>
    </summary>
    
      <category term="ActionScript3.0" scheme="/categories/ActionScript3-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[flash组件--Button类族]]></title>
    <link href="/2014/10/27/flashui-button/"/>
    <id>/2014/10/27/flashui-button/</id>
    <published>2014-10-27T10:28:58.000Z</published>
    <updated>2014-10-27T11:17:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="组件思考">组件思考</h2>
<p><code>Button</code>这个组件在游戏中使用的超级多，一个现实区域，还可能有文字的显示，AS3自带的一个简单Button，SimpeButton，和名字一样很简单，处理三帧的显示，接受鼠标事件，但是可拓展性太小，而且没有获取子视图的API提供，所以重写一个。</p>
<h3 id="设计">设计</h3>
<p>同样也是需要三帧显示，对应<code>mouse_out</code>、<code>mouse_ove</code>、<code>mouse_dow</code>，当然你也可以让美术设计给更多，不过一般我们只需要三帧就可以了(这个和手机游戏中使用的三种状态的纹理差不多意思)。因为这三帧是分别对应三种鼠标事件的显示，所以内部需要监听和管理这三个事件，鼠标移上去可能还需要显示提示tip，这个在组件基类的时候已经处理过了，重写调用即可。事件在内部的监听一般会使用弱引用，就是<code>addEventListener</code>方法最后一个参数这是为<code>true</code>，这样在这个对象不在被使用的时候也会清除这个事件的。</p>
<h3 id="抽象">抽象</h3>
<p>因为历史原因，我们项目的工作流还是ps-&gt;flashcs-&gt;code，给到开发的美术资源都是fla文件，不过这种效率确实很高，所以按钮做成一个<code>MovieClip</code>用跳帧的方式去工作很方便，抽象一个基类<code>ButtonBase</code>,实现<code>IState</code>接口的唯一方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeState</span><span class="params">(state:int)</span><span class="type">:void</span></span>;</div></pre></td></tr></table></figure>

<p>这个方法就是在处理特定的事件的时候改变按钮的状态，就是跳帧。<br>接下来在其他的按钮类族（<code>CheckBox</code> <code>RadioButton</code>）中也会去调这个函数，让整个按钮类族都变的很方便。</p>
<h4 id="Button">Button</h4>
<p>按照上面的思路写一个还是挺简单，其中要注意父类的<code>callLate</code>函数的调用。</p>
<h4 id="CheckBox">CheckBox</h4>
<p>比它的父类多了一种选中的状态，所以就多了三帧，而且还有一个选中属性<code>selected</code>，可读写，设置此值会影响组件的外观</p>
<h4 id="RadioButton">RadioButton</h4>
<p>单选的按钮，和<code>CheckBox</code>类似也是6帧，一般不会单独使用，因为不能通过点击自己来切换选中和未选中状态，所以添加到<code>RadioButtonGroup</code>类来使用。</p>
<p><strong>项目中使用的按钮类用这三种就能全部涵盖进来了</strong></p>
<h2 id="常用属性">常用属性</h2>
<ul>
<li><code>text</code>:设置按钮上的文字。</li>
<li><code>slected</code>:是否选中状态(<code>CheckBox</code> <code>RadioButton</code>)。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="组件思考">组件思考</h2>
<p><code>Button</code>这个组件在游戏中使用的超级多，一个现实区域，还可能有文字的显示，AS3自带的一个简单Button，SimpeButton，和名字一样很简单，处理三帧的显示，接受鼠标事件，但是可拓展性太小，]]>
    </summary>
    
      <category term="ActionScript3.0" scheme="/categories/ActionScript3-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网格]]></title>
    <link href="/2014/10/26/Minko3d-mesh/"/>
    <id>/2014/10/26/Minko3d-mesh/</id>
    <published>2014-10-26T14:51:18.000Z</published>
    <updated>2014-10-26T14:51:44.000Z</updated>
    <content type="html"><![CDATA[<p>源码中运用到mesh—网格的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cube : Mesh = <span class="keyword">new</span> Mesh(</div><div class="line">CubeGeometry.cubeGeometry,</div><div class="line"><span class="keyword">new</span> BasicMaterial({</div><div class="line">diffuseMap : TextureLoader.loadClass(EMBED_TEXTURE),</div><div class="line">diffuseColor: <span class="number">0xffffffff</span>,</div><div class="line">diffuseTransform: <span class="keyword">new</span> HLSAMatrix4x4(),</div><div class="line">blending: Blending.ALPHA</div><div class="line">})；</div></pre></td></tr></table></figure>

<p><code>Mesh</code>类的构造函数需要三个参数，第一个是网格的几何形状，如立方体，Minko中内置了好几种常用的形状，Gemetry保存了3D对象的所有顶点坐标,BasicMaterial是一个比较基本的材质类，使各个面都具有相同的纹理渲染，以后对每个文件再做深入的研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>源码中运用到mesh—网格的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div]]>
    </summary>
    
      <category term="Minko3D" scheme="/categories/Minko3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[动画类]]></title>
    <link href="/2014/10/26/Minko3d-action/"/>
    <id>/2014/10/26/Minko3d-action/</id>
    <published>2014-10-26T14:46:16.000Z</published>
    <updated>2014-10-26T14:50:03.000Z</updated>
    <content type="html"><![CDATA[<p>minko对显示对象的控制均是由控制器所控制的，动画也不例外—AnimationController类是控制对象动画的类。AnimationController构造函数签名</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">function</span> AnimationController(timelines      : Vector.&lt;ITimeline&gt;,            <span class="keyword">loop</span>          : <span class="built_in">Boolean</span>     = <span class="literal">true</span>)</div></pre></td></tr></table></figure>

<p>实现ITimeline接口的vector，是否循环loop。和ITimeline相关的类在package aerys.minko.type.animation.timeline包内。来看看例子中两个类 </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> transforms : Vector.&lt;Matrix4x4&gt;     = <span class="keyword">new</span> &lt;Matrix4x4&gt;[</div><div class="line">                    <span class="keyword">new</span> Matrix4x4(),</div><div class="line">                    <span class="keyword">new</span> Matrix4x4().appendScale(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>),</div><div class="line">                    <span class="keyword">new</span> Matrix4x4()</div><div class="line">               ];</div><div class="line">               <span class="keyword">var</span> alphas : Vector.&lt;<span class="built_in">Number</span>&gt; = <span class="keyword">new</span> &lt;<span class="built_in">Number</span>&gt;[<span class="number">1.</span>, <span class="number">.25</span>, <span class="number">1</span>];</div><div class="line">               <span class="keyword">var</span> animationCtrl : AnimationController = <span class="keyword">new</span> AnimationController(</div><div class="line">                    <span class="keyword">new</span> &lt;ITimeline&gt;[</div><div class="line">                         <span class="keyword">new</span> MatrixRegularTimeline(<span class="string">'transform'</span>, <span class="number">1000</span>, transforms, <span class="literal">true</span>),<span class="keyword">new</span> ScalarRegularTimeline(<span class="string">'material.diffuseTransform.alpha'</span>, <span class="number">1000</span>, alphas)</div><div class="line">                    ]</div><div class="line">               )</div></pre></td></tr></table></figure>

<p><code>MatrixRegularTimeline</code>：矩阵规律变化类，第一个参数是要实现动画对象的属性，先清楚对象类型是否具有此属性，否则会报错这个你自己负责。第二个参数是持续多长时间，单位是毫秒；第三个是Matrix4x4的Vector对象，包含你要改变对象的Matrix4x4属性，是依次执行的，所以上面就是从原来的大小缩小一倍再还原的过程；第四个参数是是否修改缩放，在这里  <code>new Matrix4x4().appendScale(0.5, 0.5, 0.5)</code>就是修改了缩放，必须设置成true了，要不然干吗用这个么个矩阵啊。<br>ScalarRegularTimeline：<br>修改对象属性数值的列，第一个参数是属性名，这个属性必须是number或者int，uint等数值类型的，第二个是持续时间；第三个是修改数字的Vector对象，也是依次执行的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">var</span> cube <span class="value">: Mesh = new <span class="function">Mesh</span>(</span></div><div class="line">                    CubeGeometry.cubeGeometry,</div><div class="line">                    new <span class="function">BasicMaterial</span>({</div><div class="line">                         diffuseMap                : TextureLoader.<span class="function">loadClass</span>(EMBED_TEXTURE),</div><div class="line">                         diffuseColor          : <span class="number">0</span>xffffffff,</div><div class="line">                         diffuseTransform     : new <span class="function">HLSAMatrix4x4</span>(),</div><div class="line">                         blending               : Blending.ALPHA</div><div class="line">                    })</div><div class="line">               );</div></pre></td></tr></table></figure>

<p>在上面的ScalarRegularTimeline中使用属性material.diffuseTransform.alpha，cube 是一个网格，minko内置了好几种网格形状，这里使用立方体形状，材质是BasicMaterial对应上面的material属性，BasicMaterial对象具有diffuseTransform 属性，上面的例子中diffuseTransform对象是HLSAMatrix4x4类型具有alpha属性，和ScalarRegularTimeline类中第一个构造函数是对应的，所以你在写这些动画的时候要清楚你的对象是否真得具有此属性。<br>实现ITimeline接口的类都大同小异，基本差不多，ScalarTimeline类是一个用时刻表控制的，第二个参数就是时刻表，就是在什么时候做什么事，各个时刻之间是平滑变化的，如果你把两个时刻设置成了一样那么第一个就看不到了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>minko对显示对象的控制均是由控制器所控制的，动画也不例外—AnimationController类是控制对象动画的类。AnimationController构造函数签名</p>
<figure class="highlight"><table><tr><td class]]>
    </summary>
    
      <category term="Minko3D" scheme="/categories/Minko3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[接受鼠标事件]]></title>
    <link href="/2014/10/26/Minko3d-mouse/"/>
    <id>/2014/10/26/Minko3d-mouse/</id>
    <published>2014-10-26T14:42:45.000Z</published>
    <updated>2014-10-26T14:45:40.000Z</updated>
    <content type="html"><![CDATA[<p><code>PickingController</code>，鼠标信号采集控制器，可以响应鼠标事件，必需绑定到一个实现IEventDispatcher接口对象上，再minko中只有viewprot了，通过viewprot试图接口响应各种鼠标事件，可以将这个控制器绑定到某一显示对象上或者一个组group等，<br>响应回调函数的接口签名</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">(ctrl : PickingController, mesh : Mesh, mouseX : Number, mouseY : Number)</span> <span class="type">: void</span></span></div></pre></td></tr></table></figure>

<p>第一个是控制器本身，第二个是鼠标下的网格，第三第四是鼠标在bindDefaultInputs绑定的对象的局部坐标。<br>官网对这个类的<a href="http://doc.minko.io/wiki/Add_Pixel_Perfect_Mouse_Interactivity/" target="_blank" rel="external">讲解</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>PickingController</code>，鼠标信号采集控制器，可以响应鼠标事件，必需绑定到一个实现IEventDispatcher接口对象上，再minko中只有viewprot了，通过viewprot试图接口响应各种鼠标事件，可以将这个控制器绑定到某一显]]>
    </summary>
    
      <category term="Minko3D" scheme="/categories/Minko3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[light（1）]]></title>
    <link href="/2014/10/26/Minko3d-light/"/>
    <id>/2014/10/26/Minko3d-light/</id>
    <published>2014-10-26T14:39:26.000Z</published>
    <updated>2014-10-26T14:41:35.000Z</updated>
    <content type="html"><![CDATA[<p><code>SpotLight</code>，聚光灯，顾名思义，像聚光灯一样，一个点出发，光线是不平行的，有一个外圈和内圈，类似用过的可以调节聚光的手电:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var spotLight: <span class="variable">SpotLight=</span> new SpotLight();</div><div class="line">spotLight.<span class="variable">diffuse=</span> .<span class="number">2</span>;</div><div class="line">spotLight.<span class="variable">shadowCastingType=</span> ShadowMappingType.MATRIX;</div><div class="line">spotLight.<span class="variable">shadowMapSize=</span> <span class="number">1024</span>;</div><div class="line">spotLight.<span class="variable">outerRadius=</span> Math.PI / <span class="number">2</span>;</div><div class="line">spotLight.<span class="variable">innerRadius=</span> <span class="number">0</span>;</div><div class="line">spotLight.<span class="variable">shadowMapQuality=</span> ShadowMappingQuality.LOW;</div></pre></td></tr></table></figure>


<p>diffuse光线的强度，越大越亮；<br>shadowCastingType,投影类型，影响影子的形状；<br>shadowMapSize，投影纹理的长宽，是一个正方形的纹理；outerRadius外圈半径；<br>innerRadius内圈半径；<br>shadowMapQuality投影质量，为了节省性能，一般用low就行</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>SpotLight</code>，聚光灯，顾名思义，像聚光灯一样，一个点出发，光线是不平行的，有一个外圈和内圈，类似用过的可以调节聚光的手电:</p>
<figure class="highlight"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="Minko3D" scheme="/categories/Minko3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Minko3d引擎Demo学习]]></title>
    <link href="/2014/10/26/Minko3d-entry/"/>
    <id>/2014/10/26/Minko3d-entry/</id>
    <published>2014-10-26T14:30:24.000Z</published>
    <updated>2014-10-26T14:38:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一个flash3d框架">一个flash3d框架</h2>
<p>比较早得时候学习的一个框架，当时和其他比较出名的3D框架比如away3d对比了下，觉得这个上手难度低而且封装的比较好，就开始学习一段时间，这个团队现在做了c++版本的引擎，也是跨平台的。之前的笔记现在搬过来。</p>
<h2 id="Demo入口">Demo入口</h2>
<p>MinkoExampleApplication文件是所有实例主文件的基类，一个minko程序的大致框架流程基本就是这样。<br>所有的现实对象继承AbstractSceneNode并实现了ISceneNode接口，如果你想自定义一个minko的现实对象也要这样做。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">initializeScene</span><span class="params">()</span> <span class="type">: void</span></span></div><div class="line">{</div><div class="line">     _camera = <span class="keyword">new</span> Camera();</div><div class="line">     _cameraController = <span class="keyword">new</span> ArcBallController();</div><div class="line">     _cameraController.bindDefaultControls(stage);</div><div class="line">     _cameraController.minDistance = <span class="number">1</span>;</div><div class="line">     _cameraController.yaw = Math.PI * -<span class="number">.5</span>;</div><div class="line">     _cameraController.pitch = Math.PI / <span class="number">2</span>;</div><div class="line">     _cameraController.distance = <span class="number">5</span>;</div><div class="line">     camera.addController(_cameraController);              </div><div class="line">     _scene.addChild(camera);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Camera就是一个显示对象，一般来说我们不需要修改这个类，除非你有一些奇葩的想法；<br>并且在这里添加了一个控制器—响应鼠标操作的控制器，这个类会经常用到，会响应鼠标点击，滑轮滚动以及鼠标按下拖动事件，下面是对一些成员的说明：<br>     bindDefaultControls方法，参数是IEventDispatcher类型，所以是flash的实现了改接口的原生对象；<br>     minDistance是摄像机到显示对象的最小距离，对应一个最大距离；<br>     yaw 偏离角度，影响，x和z；<br>     pitch  一个仰角，弧度制，大于0为俯视，只影响与Y的角度；<br>     distance 与现实对象间的距离，大于0时对象在摄像机前面；<br>camera实现了ISceneNode接口，所以可以添加控制器，现实对象的响应都是在控制器中实现的，并可以添加多个控制器。<br>Scene类，minko中可以渲染其他显示对象的类，因为实现了RenderingController控制器，RenderingController类是一个渲染实现类，最终使用stage3d对象的是DrawCall类，想自定义一个渲染对象继承Scene类即可。<br>还有一个重要的类Viewport，这是连接原生显示对象和minko的类，看名字你就懂的，这个类封装了调用了Context3DResource—一个对3D对象管理的类，但是我们无法访问，有需要请用自己的双手解决。<br>MinkoExampleApplication文件还是比较简单，看下就会用了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一个flash3d框架">一个flash3d框架</h2>
<p>比较早得时候学习的一个框架，当时和其他比较出名的3D框架比如away3d对比了下，觉得这个上手难度低而且封装的比较好，就开始学习一段时间，这个团队现在做了c++版本的引擎，也是跨平台的。之前的笔记现]]>
    </summary>
    
      <category term="Minko3D" scheme="/categories/Minko3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义AS3UI组件--前言]]></title>
    <link href="/2014/10/25/about-flash-UI/"/>
    <id>/2014/10/25/about-flash-UI/</id>
    <published>2014-10-24T16:55:37.000Z</published>
    <updated>2014-10-25T09:09:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>公司用了好多年的公共库变的很臃肿，效率低，代码重复，最后这个重构重写的任务安排到了我，用blog记录下对AS组件的思考.</p>
<h2 id="基类需要解决的问题">基类需要解决的问题</h2>
<p>对组件基类的思考:<br>基础组件——一个容器，AS3提供的最基本的容器是<strong>Sprite</strong>，还有一个虚基类<strong>DisplayObjectContainer</strong>，但是这是一个虚基类且不能接受鼠标事件，所以为了方便（我觉得程序员的东西就应该方便自己）直接继承<strong>Sprite</strong>，但是<strong>Sprite</strong>有一个比较尴尬的问题就是不能设置大小尺寸，这里用到<code>scrollRect</code>属性来控制尺寸，<code>scrollRect</code>属性可以裁剪视图并对视图做滚动处理，更多信息谷歌。</p>
<h3 id="如何提高渲染效率">如何提高渲染效率</h3>
<p>对于组件属性修改的响应，比较直接的想法就是，在修改的时候就做出响应并做响应的处理，但是这样做的话效率比较低，可能在同一帧中对同一属性或者方法中调用多次那么这段逻辑就要处理多次了。<br>这里使用AS中较高级的用法<code>Render</code>事件，每一个显示对象都会监听到这个事件，在显示对象渲染之前这是处理逻辑的最后一次机会。每次需要<code>DisplayObject</code>触发<code>render</code>事时，都要调用一次<code>stage.invalidate();</code><br>所以在渲染之前统一处理显示逻辑可以减少很多重复的代码，定义一个<code>callLater</code>函数，所有需要延迟处理的逻辑调用这个函数，签名：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">callLater</span><span class="params">(call:Function, <span class="rest_arg">...args</span>)</span><span class="type">:void</span></span>;</div></pre></td></tr></table></figure>

<p>但是也有可能同一个函数<code>call</code>被调用多次，所以做一个判断只需要对同一个函数执行一次，传递的参数为最后修改的，不过这个参数一般是全局定义的，这样执行的效率会高很多。</p>
<h3 id="设置组件的尺寸">设置组件的尺寸</h3>
<p>组件<code>width</code>和<code>height</code>属性要被重写<br><code>get</code>方法：</p>
<blockquote>
<p>如果没有设置过尺寸就返回所有可视的子视图占得大小，就是一个<code>for</code>循环，用所有子视图的坐标加宽高。</p>
</blockquote>
<p><code>set</code>方法</p>
<blockquote>
<p>设置尺寸的时候重新设置<code>scrollRect</code>属性，这个属性可以裁剪视图显示，然后延迟布局组件内部布局。</p>
</blockquote>
<h3 id="组件内部事件管理">组件内部事件管理</h3>
<p><strong>组件内部也会有事件管理并抛出，所以内部事件也需要管理不然就会有内存泄露了，但是这些管理不应该由使用者去关心，在内部管理对使用者是透明的。</strong></p>
<ol>
<li>显示对象在添加到父容器的时候才启用内部事件的监听，一种是自己监听<code>addToStage</code>事件，但是这个事件也需要被管理， 在逻辑上会有一个死结，所以重新定义一个<code>addToParent</code>函数，内部调用<code>addEvents</code>，这个函数集中监听了内部事件，在被添加到父容器的时候就会监听内部的必要事件。</li>
<li>内部事件何时被移除。以往删除显示对象需要先判断显示对象的<code>parent</code>属性是否为<code>null</code>再删除这个显示对象，自定义组件新增函数:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFromParent</span><span class="params">(clear:true)</span><span class="type">:void</span></span></div></pre></td></tr></table></figure>

<p>内部做一个判断可以减少很多重复的代码，并且可以通过<code>clear</code>参数判断是否移除内部事件<code>dispose</code>函数。</p>
<h2 id="常用属性">常用属性</h2>
<ul>
<li><code>enable</code>:是否禁用组件，禁用鼠标事件并且改变组件外观。</li>
<li><code>tip</code>:鼠标提示，提示跟随鼠标在组件内部移动，涉及内部事件。</li>
<li><code>heigth/width</code>:重写宽高，不要调用<code>super.width/height=value</code>，否则组件在设置宽高的时候不见。</li>
<li><code>displayWidth/Height</code>:组件的显示尺寸，就是看到的大小，宽高乘以缩放值就是显示大小。</li>
<li><code>skin</code>:组件的皮肤。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2>
<p>公司用了好多年的公共库变的很臃肿，效率低，代码重复，最后这个重构重写的任务安排到了我，用blog记录下对AS组件的思考.</p>
<h2 id="基类需要解决的问题">基类需要解决的问题</h2>
<p>对组件基类的思考:<br>基础]]>
    </summary>
    
      <category term="ActionScript3.0" scheme="/categories/ActionScript3-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建Hexo blog总结]]></title>
    <link href="/2014/10/24/finish-blog/"/>
    <id>/2014/10/24/finish-blog/</id>
    <published>2014-10-24T15:22:55.000Z</published>
    <updated>2014-10-25T06:47:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="搭建环境">搭建环境</h2>
<p>安装环境是<strong><em>OS X Yosemite</em></strong></p>
<h2 id="安装hexo出错">安装hexo出错</h2>
<p><code>npm install hexo -g</code>命令在Mac下需要管理员权限所以就是<code>sudo npm install hexo -g</code></p>
<h2 id="使用pacman主题">使用pacman主题</h2>
<p>这个主题还是挺好看的，虽然不如<a href="https://github.com/hexojs/hexo-theme-light" target="_blank" rel="external">light</a>主题的简洁，但是那个转动的头像挺有意思的，哈哈。</p>
<h3 id="使用categories功能">使用categories功能</h3>
<p>因为是第一次搭建个人博客，所以用了主题之后不知道这个文章是怎么到分类里面去得，按照配置文件的说明是新建<code>categories</code>文件夹到<code>../source</code>.但是在<code>pacman</code>这个文件夹下折腾了半天，崩溃，原来是在博客的根目录下得<code>source</code>文件下新建，然后新建<code>index.md</code>文件就可以了。</p>
<h2 id="添加新浪微博widget(微博秀)">添加新浪微博widget(微博秀)</h2>
<ol>
<li>去<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="external">新浪微博开放平台</a>设置和生成微博秀代码。</li>
<li>在<code>themes/pacman/layout/_widget</code>中新建名为<code>weibo.ejs</code>的文件，将刚才的代码直接保存到这里。</li>
<li>在<code>themes/pacman/_config.yml</code>中，添加如下：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">widgets:</div><div class="line"><span class="bullet">- </span>weibo</div></pre></td></tr></table></figure>

<p>刷新就可以看到了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="搭建环境">搭建环境</h2>
<p>安装环境是<strong><em>OS X Yosemite</em></strong></p>
<h2 id="安装hexo出错">安装hexo出错</h2>
<p><code>npm install hexo -g</co]]>
    </summary>
    
      <category term="hexo" scheme="/categories/hexo/"/>
    
  </entry>
  
</feed>
